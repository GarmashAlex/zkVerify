
//! Autogenerated weights for `pallet_session`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 31.0.0
//! DATE: 2024-07-23, STEPS: `50`, REPEAT: `30`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `0a7a82bf9f3e`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_session
// --extrinsic
// purge_keys,set_keys
// --steps
// 50
// --repeat
// 30
// --output
// /data/benchmark/runtime/src/weights/pallet_session.rs
// --template
// /data/benchmark/node/zkv-deploy-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_session` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_session::WeightInfo for ZKVWeight<T> {
    /// Storage: `Session::NextKeys` (r:1 w:1)
    /// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Session::KeyOwner` (r:3 w:3)
    /// Proof: `Session::KeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn set_keys() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `482`
        //  Estimated: `8897`
        // Minimum execution time: 28_003_000 picoseconds.
        Weight::from_parts(28_834_000, 8897)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: `Session::NextKeys` (r:1 w:1)
    /// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Session::KeyOwner` (r:0 w:3)
    /// Proof: `Session::KeyOwner` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn purge_keys() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `449`
        //  Estimated: `3914`
        // Minimum execution time: 18_174_000 picoseconds.
        Weight::from_parts(18_835_000, 3914)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
}
