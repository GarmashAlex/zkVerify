// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_treasury`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-12-07, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `a8a14f6e36cb`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-relay
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet-treasury
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_treasury.rs
// --template
// /data/benchmark/node/zkv-deploy-weight-template.hbs
// --base-path=/tmp/tmp.eJYai13mfL

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_treasury` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_treasury::WeightInfo for ZKVWeight<T> {
    /// Storage: `Treasury::ProposalCount` (r:1 w:1)
    /// Proof: `Treasury::ProposalCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Treasury::Approvals` (r:1 w:1)
    /// Proof: `Treasury::Approvals` (`max_values`: Some(1), `max_size`: Some(402), added: 897, mode: `MaxEncodedLen`)
    /// Storage: `Treasury::Proposals` (r:0 w:1)
    /// Proof: `Treasury::Proposals` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
    fn spend_local() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42`
        //  Estimated: `1887`
        // Minimum execution time: 7_654_000 picoseconds.
        Weight::from_parts(8_015_000, 1887)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Treasury::Approvals` (r:1 w:1)
    /// Proof: `Treasury::Approvals` (`max_values`: Some(1), `max_size`: Some(402), added: 897, mode: `MaxEncodedLen`)
    fn remove_approval() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `127`
        //  Estimated: `1887`
        // Minimum execution time: 4_869_000 picoseconds.
        Weight::from_parts(5_050_000, 1887)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `System::Account` (r:100 w:100)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `Treasury::Deactivated` (r:1 w:1)
    /// Proof: `Treasury::Deactivated` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `Treasury::Approvals` (r:1 w:1)
    /// Proof: `Treasury::Approvals` (`max_values`: Some(1), `max_size`: Some(402), added: 897, mode: `MaxEncodedLen`)
    /// Storage: `Treasury::Proposals` (r:99 w:99)
    /// Proof: `Treasury::Proposals` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
    /// Storage: `Bounties::BountyApprovals` (r:1 w:1)
    /// Proof: `Bounties::BountyApprovals` (`max_values`: Some(1), `max_size`: Some(402), added: 897, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[0, 99]`.
    fn on_initialize_proposals(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + p * (158 ±0)`
        //  Estimated: `3593 + p * (2603 ±0)`
        // Minimum execution time: 16_551_000 picoseconds.
        Weight::from_parts(16_640_686, 3593)
            // Standard Error: 10_652
            .saturating_add(Weight::from_parts(18_240_380, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(p.into())))
            .saturating_add(T::DbWeight::get().writes(4_u64))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 2603).saturating_mul(p.into()))
    }
    /// Storage: `Treasury::SpendCount` (r:1 w:1)
    /// Proof: `Treasury::SpendCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Treasury::Spends` (r:0 w:1)
    /// Proof: `Treasury::Spends` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
    fn spend() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42`
        //  Estimated: `1489`
        // Minimum execution time: 7_243_000 picoseconds.
        Weight::from_parts(7_584_000, 1489)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Treasury::Spends` (r:1 w:1)
    /// Proof: `Treasury::Spends` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    fn payout() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `262`
        //  Estimated: `6196`
        // Minimum execution time: 43_251_000 picoseconds.
        Weight::from_parts(43_742_000, 6196)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Treasury::Spends` (r:1 w:1)
    /// Proof: `Treasury::Spends` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
    fn check_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `160`
        //  Estimated: `3534`
        // Minimum execution time: 8_957_000 picoseconds.
        Weight::from_parts(9_357_000, 3534)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Treasury::Spends` (r:1 w:1)
    /// Proof: `Treasury::Spends` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
    fn void_spend() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `160`
        //  Estimated: `3534`
        // Minimum execution time: 8_165_000 picoseconds.
        Weight::from_parts(8_446_000, 3534)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}
