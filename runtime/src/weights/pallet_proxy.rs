// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_proxy`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-12-07, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `16b7116fade2`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-relay
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet-proxy
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_proxy.rs
// --template
// /data/benchmark/node/zkv-deploy-weight-template.hbs
// --base-path=/tmp/tmp.eJYai13mfL

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_proxy` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_proxy::WeightInfo for ZKVWeight<T> {
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn proxy(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 9_017_000 picoseconds.
        Weight::from_parts(9_572_474, 4706)
            // Standard Error: 701
            .saturating_add(Weight::from_parts(26_749, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn proxy_announced(a: u32, p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379 + a * (68 ±0) + p * (37 ±0)`
        //  Estimated: `5698`
        // Minimum execution time: 29_034_000 picoseconds.
        Weight::from_parts(29_361_022, 5698)
            // Standard Error: 1_558
            .saturating_add(Weight::from_parts(149_369, 0).saturating_mul(a.into()))
            // Standard Error: 1_609
            .saturating_add(Weight::from_parts(27_244, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn remove_announcement(a: u32, p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `294 + a * (68 ±0)`
        //  Estimated: `5698`
        // Minimum execution time: 18_234_000 picoseconds.
        Weight::from_parts(18_638_764, 5698)
            // Standard Error: 977
            .saturating_add(Weight::from_parts(154_554, 0).saturating_mul(a.into()))
            // Standard Error: 1_010
            .saturating_add(Weight::from_parts(3_725, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn reject_announcement(a: u32, p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `294 + a * (68 ±0)`
        //  Estimated: `5698`
        // Minimum execution time: 18_164_000 picoseconds.
        Weight::from_parts(18_413_960, 5698)
            // Standard Error: 1_445
            .saturating_add(Weight::from_parts(160_876, 0).saturating_mul(a.into()))
            // Standard Error: 1_493
            .saturating_add(Weight::from_parts(9_864, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn announce(a: u32, p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `311 + a * (68 ±0) + p * (37 ±0)`
        //  Estimated: `5698`
        // Minimum execution time: 24_576_000 picoseconds.
        Weight::from_parts(26_375_929, 5698)
            // Standard Error: 1_848
            .saturating_add(Weight::from_parts(160_739, 0).saturating_mul(a.into()))
            // Standard Error: 1_910
            .saturating_add(Weight::from_parts(35_123, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn add_proxy(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 17_883_000 picoseconds.
        Weight::from_parts(18_331_083, 4706)
            // Standard Error: 793
            .saturating_add(Weight::from_parts(35_998, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn remove_proxy(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 17_613_000 picoseconds.
        Weight::from_parts(18_371_934, 4706)
            // Standard Error: 936
            .saturating_add(Weight::from_parts(34_410, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn remove_proxies(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 15_930_000 picoseconds.
        Weight::from_parts(16_434_116, 4706)
            // Standard Error: 1_017
            .saturating_add(Weight::from_parts(33_465, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn create_pure(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101`
        //  Estimated: `4706`
        // Minimum execution time: 18_835_000 picoseconds.
        Weight::from_parts(19_619_654, 4706)
            // Standard Error: 1_236
            .saturating_add(Weight::from_parts(6_400, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[0, 30]`.
    fn kill_pure(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `126 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 16_751_000 picoseconds.
        Weight::from_parts(17_365_170, 4706)
            // Standard Error: 834
            .saturating_add(Weight::from_parts(27_580, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}
