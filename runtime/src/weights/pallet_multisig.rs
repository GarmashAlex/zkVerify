// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_multisig`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 36.0.0
//! DATE: 2024-08-07, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `c88716b16319`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet-multisig
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_multisig.rs
// --template
// /data/benchmark/node/zkv-deploy-weight-template.hbs
// --base-path=/tmp/tmp.3HgX1SvP0b

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_multisig` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_multisig::WeightInfo for ZKVWeight<T> {
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_threshold_1(z: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_320_000 picoseconds.
        Weight::from_parts(10_701_970, 0)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(420, 0).saturating_mul(z.into()))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_create(s: u32, z: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `192 + s * (2 ±0)`
        //  Estimated: `6811`
        // Minimum execution time: 32_611_000 picoseconds.
        Weight::from_parts(26_040_853, 6811)
            // Standard Error: 626
            .saturating_add(Weight::from_parts(80_564, 0).saturating_mul(s.into()))
            // Standard Error: 6
            .saturating_add(Weight::from_parts(1_321, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[3, 100]`.
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_approve(s: u32, z: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211`
        //  Estimated: `6811`
        // Minimum execution time: 21_810_000 picoseconds.
        Weight::from_parts(14_518_935, 6811)
            // Standard Error: 364
            .saturating_add(Weight::from_parts(78_560, 0).saturating_mul(s.into()))
            // Standard Error: 3
            .saturating_add(Weight::from_parts(1_348, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_complete(s: u32, z: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `314 + s * (33 ±0)`
        //  Estimated: `6811`
        // Minimum execution time: 38_462_000 picoseconds.
        Weight::from_parts(28_525_782, 6811)
            // Standard Error: 942
            .saturating_add(Weight::from_parts(106_001, 0).saturating_mul(s.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(1_411, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    fn approve_as_multi_create(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `193 + s * (2 ±0)`
        //  Estimated: `6811`
        // Minimum execution time: 24_516_000 picoseconds.
        Weight::from_parts(25_435_812, 6811)
            // Standard Error: 545
            .saturating_add(Weight::from_parts(77_755, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    fn approve_as_multi_approve(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211`
        //  Estimated: `6811`
        // Minimum execution time: 12_905_000 picoseconds.
        Weight::from_parts(13_550_996, 6811)
            // Standard Error: 381
            .saturating_add(Weight::from_parts(79_171, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3346), added: 5821, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    fn cancel_as_multi(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `383 + s * (1 ±0)`
        //  Estimated: `6811`
        // Minimum execution time: 25_738_000 picoseconds.
        Weight::from_parts(26_537_881, 6811)
            // Standard Error: 812
            .saturating_add(Weight::from_parts(82_496, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}
