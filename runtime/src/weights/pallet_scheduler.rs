// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_scheduler`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 36.0.0
//! DATE: 2024-08-07, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `9090b8bb7105`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet-scheduler
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_scheduler.rs
// --template
// /data/benchmark/node/zkv-deploy-weight-template.hbs
// --base-path=/tmp/tmp.3HgX1SvP0b

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_scheduler` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_scheduler::WeightInfo for ZKVWeight<T> {
    /// Storage: `Scheduler::IncompleteSince` (r:1 w:1)
    /// Proof: `Scheduler::IncompleteSince` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    fn service_agendas_base() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `30`
        //  Estimated: `1489`
        // Minimum execution time: 2_885_000 picoseconds.
        Weight::from_parts(3_066_000, 1489)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Scheduler::Agenda` (r:1 w:1)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(10463), added: 12938, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 50]`.
    fn service_agenda_base(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `77 + s * (177 ±0)`
        //  Estimated: `13928`
        // Minimum execution time: 3_496_000 picoseconds.
        Weight::from_parts(7_229_637, 13928)
            // Standard Error: 1_797
            .saturating_add(Weight::from_parts(336_315, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn service_task_base() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_445_000 picoseconds.
        Weight::from_parts(2_625_000, 0)
    }
    /// Storage: `Preimage::PreimageFor` (r:1 w:1)
    /// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `Measured`)
    /// Storage: `Preimage::StatusFor` (r:1 w:0)
    /// Proof: `Preimage::StatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
    /// Storage: `Preimage::RequestStatusFor` (r:1 w:1)
    /// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[128, 4194304]`.
    fn service_task_fetched(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `217 + s * (1 ±0)`
        //  Estimated: `3682 + s * (1 ±0)`
        // Minimum execution time: 17_813_000 picoseconds.
        Weight::from_parts(18_234_000, 3682)
            // Standard Error: 6
            .saturating_add(Weight::from_parts(1_151, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 1).saturating_mul(s.into()))
    }
    /// Storage: `Scheduler::Lookup` (r:0 w:1)
    /// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
    fn service_task_named() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_727_000 picoseconds.
        Weight::from_parts(3_908_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn service_task_periodic() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_365_000 picoseconds.
        Weight::from_parts(2_605_000, 0)
    }
    fn execute_dispatch_signed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_884_000 picoseconds.
        Weight::from_parts(2_003_000, 0)
    }
    fn execute_dispatch_unsigned() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_893_000 picoseconds.
        Weight::from_parts(2_044_000, 0)
    }
    /// Storage: `Scheduler::Agenda` (r:1 w:1)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(10463), added: 12938, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 49]`.
    fn schedule(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `77 + s * (177 ±0)`
        //  Estimated: `13928`
        // Minimum execution time: 8_456_000 picoseconds.
        Weight::from_parts(11_937_558, 13928)
            // Standard Error: 2_243
            .saturating_add(Weight::from_parts(342_553, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Scheduler::Agenda` (r:1 w:1)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(10463), added: 12938, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Lookup` (r:0 w:1)
    /// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 50]`.
    fn cancel(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `77 + s * (177 ±0)`
        //  Estimated: `13928`
        // Minimum execution time: 14_417_000 picoseconds.
        Weight::from_parts(14_204_318, 13928)
            // Standard Error: 1_001
            .saturating_add(Weight::from_parts(532_764, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Scheduler::Lookup` (r:1 w:1)
    /// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Agenda` (r:1 w:1)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(10463), added: 12938, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 49]`.
    fn schedule_named(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `254 + s * (185 ±0)`
        //  Estimated: `13928`
        // Minimum execution time: 11_232_000 picoseconds.
        Weight::from_parts(16_230_658, 13928)
            // Standard Error: 2_757
            .saturating_add(Weight::from_parts(387_974, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Scheduler::Lookup` (r:1 w:1)
    /// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Agenda` (r:1 w:1)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(10463), added: 12938, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 50]`.
    fn cancel_named(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `280 + s * (185 ±0)`
        //  Estimated: `13928`
        // Minimum execution time: 17_122_000 picoseconds.
        Weight::from_parts(16_244_565, 13928)
            // Standard Error: 2_473
            .saturating_add(Weight::from_parts(613_148, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Scheduler::Agenda` (r:1 w:1)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(10463), added: 12938, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 50]`.
    fn schedule_retry(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `117`
        //  Estimated: `13928`
        // Minimum execution time: 7_985_000 picoseconds.
        Weight::from_parts(8_479_486, 13928)
            // Standard Error: 450
            .saturating_add(Weight::from_parts(18_416, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Scheduler::Agenda` (r:1 w:0)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(10463), added: 12938, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
    fn set_retry() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `8927`
        //  Estimated: `13928`
        // Minimum execution time: 23_735_000 picoseconds.
        Weight::from_parts(24_436_000, 13928)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Scheduler::Lookup` (r:1 w:0)
    /// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Agenda` (r:1 w:0)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(10463), added: 12938, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
    fn set_retry_named() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `9605`
        //  Estimated: `13928`
        // Minimum execution time: 28_132_000 picoseconds.
        Weight::from_parts(28_754_000, 13928)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Scheduler::Agenda` (r:1 w:0)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(10463), added: 12938, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
    fn cancel_retry() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `8939`
        //  Estimated: `13928`
        // Minimum execution time: 21_750_000 picoseconds.
        Weight::from_parts(22_272_000, 13928)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Scheduler::Lookup` (r:1 w:0)
    /// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Agenda` (r:1 w:0)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(10463), added: 12938, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
    fn cancel_retry_named() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `9617`
        //  Estimated: `13928`
        // Minimum execution time: 27_322_000 picoseconds.
        Weight::from_parts(28_023_000, 13928)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}
