// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_conviction_voting`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-12-07, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `805a1b22166b`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-relay
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet-conviction-voting
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_conviction_voting.rs
// --template
// /data/benchmark/node/zkv-deploy-weight-template.hbs
// --base-path=/tmp/tmp.eJYai13mfL

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_conviction_voting` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_conviction_voting::WeightInfo for ZKVWeight<T> {
    /// Storage: `Referenda::ReferendumInfoFor` (r:1 w:1)
    /// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(936), added: 3411, mode: `MaxEncodedLen`)
    /// Storage: `ConvictionVoting::VotingFor` (r:1 w:1)
    /// Proof: `ConvictionVoting::VotingFor` (`max_values`: None, `max_size`: Some(27241), added: 29716, mode: `MaxEncodedLen`)
    /// Storage: `ConvictionVoting::ClassLocksFor` (r:1 w:1)
    /// Proof: `ConvictionVoting::ClassLocksFor` (`max_values`: None, `max_size`: Some(329), added: 2804, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Agenda` (r:1 w:1)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
    fn vote_new() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `13408`
        //  Estimated: `42428`
        // Minimum execution time: 86_533_000 picoseconds.
        Weight::from_parts(88_566_000, 42428)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: `Referenda::ReferendumInfoFor` (r:1 w:1)
    /// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(936), added: 3411, mode: `MaxEncodedLen`)
    /// Storage: `ConvictionVoting::VotingFor` (r:1 w:1)
    /// Proof: `ConvictionVoting::VotingFor` (`max_values`: None, `max_size`: Some(27241), added: 29716, mode: `MaxEncodedLen`)
    /// Storage: `ConvictionVoting::ClassLocksFor` (r:1 w:1)
    /// Proof: `ConvictionVoting::ClassLocksFor` (`max_values`: None, `max_size`: Some(329), added: 2804, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Agenda` (r:2 w:2)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
    fn vote_existing() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `14129`
        //  Estimated: `83866`
        // Minimum execution time: 115_627_000 picoseconds.
        Weight::from_parts(118_323_000, 83866)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    /// Storage: `ConvictionVoting::VotingFor` (r:1 w:1)
    /// Proof: `ConvictionVoting::VotingFor` (`max_values`: None, `max_size`: Some(27241), added: 29716, mode: `MaxEncodedLen`)
    /// Storage: `Referenda::ReferendumInfoFor` (r:1 w:1)
    /// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(936), added: 3411, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Agenda` (r:2 w:2)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
    fn remove_vote() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `13881`
        //  Estimated: `83866`
        // Minimum execution time: 93_536_000 picoseconds.
        Weight::from_parts(95_840_000, 83866)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: `ConvictionVoting::VotingFor` (r:1 w:1)
    /// Proof: `ConvictionVoting::VotingFor` (`max_values`: None, `max_size`: Some(27241), added: 29716, mode: `MaxEncodedLen`)
    /// Storage: `Referenda::ReferendumInfoFor` (r:1 w:0)
    /// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(936), added: 3411, mode: `MaxEncodedLen`)
    fn remove_other_vote() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `13005`
        //  Estimated: `30706`
        // Minimum execution time: 49_573_000 picoseconds.
        Weight::from_parts(50_795_000, 30706)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ConvictionVoting::VotingFor` (r:2 w:2)
    /// Proof: `ConvictionVoting::VotingFor` (`max_values`: None, `max_size`: Some(27241), added: 29716, mode: `MaxEncodedLen`)
    /// Storage: `Referenda::ReferendumInfoFor` (r:512 w:512)
    /// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(936), added: 3411, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Agenda` (r:2 w:2)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
    /// Storage: `ConvictionVoting::ClassLocksFor` (r:1 w:1)
    /// Proof: `ConvictionVoting::ClassLocksFor` (`max_values`: None, `max_size`: Some(329), added: 2804, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:50)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[0, 512]`.
    fn delegate(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `28915 + r * (364 ±0)`
        //  Estimated: `83866 + r * (3411 ±0)`
        // Minimum execution time: 41_468_000 picoseconds.
        Weight::from_parts(706_021_445, 83866)
            // Standard Error: 54_694
            .saturating_add(Weight::from_parts(19_834_199, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(T::DbWeight::get().writes(45_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_parts(0, 3411).saturating_mul(r.into()))
    }
    /// Storage: `ConvictionVoting::VotingFor` (r:2 w:2)
    /// Proof: `ConvictionVoting::VotingFor` (`max_values`: None, `max_size`: Some(27241), added: 29716, mode: `MaxEncodedLen`)
    /// Storage: `Referenda::ReferendumInfoFor` (r:512 w:512)
    /// Proof: `Referenda::ReferendumInfoFor` (`max_values`: None, `max_size`: Some(936), added: 3411, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Agenda` (r:2 w:2)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:50)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(30), added: 2505, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[0, 512]`.
    fn undelegate(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `28830 + r * (364 ±0)`
        //  Estimated: `83866 + r * (3411 ±0)`
        // Minimum execution time: 20_118_000 picoseconds.
        Weight::from_parts(679_805_765, 83866)
            // Standard Error: 53_584
            .saturating_add(Weight::from_parts(19_702_982, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(T::DbWeight::get().writes(43_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_parts(0, 3411).saturating_mul(r.into()))
    }
    /// Storage: `ConvictionVoting::VotingFor` (r:1 w:1)
    /// Proof: `ConvictionVoting::VotingFor` (`max_values`: None, `max_size`: Some(27241), added: 29716, mode: `MaxEncodedLen`)
    /// Storage: `ConvictionVoting::ClassLocksFor` (r:1 w:1)
    /// Proof: `ConvictionVoting::ClassLocksFor` (`max_values`: None, `max_size`: Some(329), added: 2804, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `MaxEncodedLen`)
    fn unlock() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `12236`
        //  Estimated: `30706`
        // Minimum execution time: 64_341_000 picoseconds.
        Weight::from_parts(67_857_000, 30706)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
}
