// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_vesting`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 36.0.0
//! DATE: 2024-09-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `8b1b4d062de9`, CPU: `AMD Ryzen 7 7700X 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet-vesting
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_vesting.rs
// --template
// /data/benchmark/node/zkv-deploy-weight-template.hbs
// --base-path=/tmp/tmp.lTvc0D8w2X

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_vesting` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_vesting::WeightInfo for ZKVWeight<T> {
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1057), added: 3532, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[1, 28]`.
    fn vest_locked(l: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `314 + l * (25 ±0) + s * (36 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 27_490_000 picoseconds.
        Weight::from_parts(27_459_582, 4764)
            // Standard Error: 2_739
            .saturating_add(Weight::from_parts(40_986, 0).saturating_mul(l.into()))
            // Standard Error: 4_874
            .saturating_add(Weight::from_parts(27_546, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1057), added: 3532, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[1, 28]`.
    fn vest_unlocked(l: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `314 + l * (25 ±0) + s * (36 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 28_971_000 picoseconds.
        Weight::from_parts(28_439_197, 4764)
            // Standard Error: 971
            .saturating_add(Weight::from_parts(38_494, 0).saturating_mul(l.into()))
            // Standard Error: 1_728
            .saturating_add(Weight::from_parts(45_706, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1057), added: 3532, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[1, 28]`.
    fn vest_other_locked(l: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `417 + l * (25 ±0) + s * (36 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 29_500_000 picoseconds.
        Weight::from_parts(28_892_471, 4764)
            // Standard Error: 936
            .saturating_add(Weight::from_parts(44_993, 0).saturating_mul(l.into()))
            // Standard Error: 1_666
            .saturating_add(Weight::from_parts(55_393, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1057), added: 3532, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[1, 28]`.
    fn vest_other_unlocked(l: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `417 + l * (25 ±0) + s * (36 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 31_240_000 picoseconds.
        Weight::from_parts(31_202_107, 4764)
            // Standard Error: 1_484
            .saturating_add(Weight::from_parts(34_444, 0).saturating_mul(l.into()))
            // Standard Error: 2_641
            .saturating_add(Weight::from_parts(39_523, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1057), added: 3532, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[0, 27]`.
    fn vested_transfer(l: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `417 + l * (25 ±0) + s * (36 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 62_140_000 picoseconds.
        Weight::from_parts(62_115_555, 4764)
            // Standard Error: 2_595
            .saturating_add(Weight::from_parts(40_350, 0).saturating_mul(l.into()))
            // Standard Error: 4_618
            .saturating_add(Weight::from_parts(78_355, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1057), added: 3532, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[0, 27]`.
    fn force_vested_transfer(l: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `520 + l * (25 ±0) + s * (36 ±0)`
        //  Estimated: `6196`
        // Minimum execution time: 62_270_000 picoseconds.
        Weight::from_parts(62_434_160, 6196)
            // Standard Error: 2_983
            .saturating_add(Weight::from_parts(64_711, 0).saturating_mul(l.into()))
            // Standard Error: 5_308
            .saturating_add(Weight::from_parts(85_355, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1057), added: 3532, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[2, 28]`.
    fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `415 + l * (25 ±0) + s * (36 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 30_240_000 picoseconds.
        Weight::from_parts(30_128_027, 4764)
            // Standard Error: 985
            .saturating_add(Weight::from_parts(39_290, 0).saturating_mul(l.into()))
            // Standard Error: 1_819
            .saturating_add(Weight::from_parts(38_082, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1057), added: 3532, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[2, 28]`.
    fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `415 + l * (25 ±0) + s * (36 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 31_590_000 picoseconds.
        Weight::from_parts(31_838_260, 4764)
            // Standard Error: 1_540
            .saturating_add(Weight::from_parts(42_049, 0).saturating_mul(l.into()))
            // Standard Error: 2_844
            .saturating_add(Weight::from_parts(44_830, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1057), added: 3532, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[2, 28]`.
    fn force_remove_vesting_schedule(l: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `417 + l * (25 ±0) + s * (36 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 33_090_000 picoseconds.
        Weight::from_parts(32_610_803, 4764)
            // Standard Error: 920
            .saturating_add(Weight::from_parts(44_258, 0).saturating_mul(l.into()))
            // Standard Error: 1_700
            .saturating_add(Weight::from_parts(52_413, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
}
