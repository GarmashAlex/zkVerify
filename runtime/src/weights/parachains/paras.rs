// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `crate::parachains::paras`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-12-06, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `a943a4b10afe`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-relay
// benchmark
// pallet
// --chain
// dev
// --pallet
// crate::parachains::paras
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/parachains/paras.rs
// --template
// /data/benchmark/node/zkv-deploy-weight-template.hbs
// --base-path=/tmp/tmp.eJYai13mfL

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `crate::parachains::paras` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> crate::parachains::paras::WeightInfo for ZKVWeight<T> {
    /// Storage: `Paras::CodeByHashRefs` (r:1 w:1)
    /// Proof: `Paras::CodeByHashRefs` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CurrentCodeHash` (r:1 w:1)
    /// Proof: `Paras::CurrentCodeHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Digest` (r:1 w:1)
    /// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PastCodeMeta` (r:1 w:1)
    /// Proof: `Paras::PastCodeMeta` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PastCodePruning` (r:1 w:1)
    /// Proof: `Paras::PastCodePruning` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PastCodeHash` (r:0 w:1)
    /// Proof: `Paras::PastCodeHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CodeByHash` (r:0 w:1)
    /// Proof: `Paras::CodeByHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `c` is `[9, 3145728]`.
    fn force_set_current_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `8308`
        //  Estimated: `11773`
        // Minimum execution time: 24_796_000 picoseconds.
        Weight::from_parts(26_049_000, 11773)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(2_453, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    /// Storage: `Paras::Heads` (r:0 w:1)
    /// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `s` is `[9, 1048576]`.
    fn force_set_current_head(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_188_000 picoseconds.
        Weight::from_parts(7_678_681, 0)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(895, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Paras::MostRecentContext` (r:0 w:1)
    /// Proof: `Paras::MostRecentContext` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn force_set_most_recent_context() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_394_000 picoseconds.
        Weight::from_parts(2_544_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Paras::FutureCodeHash` (r:1 w:1)
    /// Proof: `Paras::FutureCodeHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CurrentCodeHash` (r:1 w:0)
    /// Proof: `Paras::CurrentCodeHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::UpgradeCooldowns` (r:1 w:1)
    /// Proof: `Paras::UpgradeCooldowns` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CodeByHash` (r:1 w:1)
    /// Proof: `Paras::CodeByHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteList` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CodeByHashRefs` (r:1 w:1)
    /// Proof: `Paras::CodeByHashRefs` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::UpgradeRestrictionSignal` (r:0 w:1)
    /// Proof: `Paras::UpgradeRestrictionSignal` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `c` is `[9, 3145728]`.
    fn force_schedule_code_upgrade(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `8523`
        //  Estimated: `11988`
        // Minimum execution time: 34_896_000 picoseconds.
        Weight::from_parts(35_828_000, 11988)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(2_500, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    /// Storage: `Paras::FutureCodeUpgrades` (r:1 w:0)
    /// Proof: `Paras::FutureCodeUpgrades` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::Heads` (r:0 w:1)
    /// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::UpgradeGoAheadSignal` (r:0 w:1)
    /// Proof: `Paras::UpgradeGoAheadSignal` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::MostRecentContext` (r:0 w:1)
    /// Proof: `Paras::MostRecentContext` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `s` is `[9, 1048576]`.
    fn force_note_new_head(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `267`
        //  Estimated: `3732`
        // Minimum execution time: 10_199_000 picoseconds.
        Weight::from_parts(12_592_571, 3732)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(898, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::ActionsQueue` (r:1 w:1)
    /// Proof: `Paras::ActionsQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn force_queue_action() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4383`
        //  Estimated: `7848`
        // Minimum execution time: 15_308_000 picoseconds.
        Weight::from_parts(15_769_000, 7848)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteList` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::ActionsQueue` (r:1 w:1)
    /// Proof: `Paras::ActionsQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `c` is `[9, 3145728]`.
    fn add_trusted_validation_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `754`
        //  Estimated: `4219`
        // Minimum execution time: 56_416_000 picoseconds.
        Weight::from_parts(22_619_081, 4219)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_734, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Paras::CodeByHashRefs` (r:1 w:0)
    /// Proof: `Paras::CodeByHashRefs` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CodeByHash` (r:0 w:1)
    /// Proof: `Paras::CodeByHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn poke_unused_validation_code() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27`
        //  Estimated: `3492`
        // Minimum execution time: 5_210_000 picoseconds.
        Weight::from_parts(5_471_000, 3492)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `26777`
        //  Estimated: `30242`
        // Minimum execution time: 77_957_000 picoseconds.
        Weight::from_parts(79_500_000, 30242)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteList` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::UpcomingUpgrades` (r:1 w:1)
    /// Proof: `Paras::UpcomingUpgrades` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `System::Digest` (r:1 w:1)
    /// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::FutureCodeUpgrades` (r:0 w:100)
    /// Proof: `Paras::FutureCodeUpgrades` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement_finalize_upgrade_accept() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27431`
        //  Estimated: `30896`
        // Minimum execution time: 585_930_000 picoseconds.
        Weight::from_parts(595_107_000, 30896)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(104_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement_finalize_upgrade_reject() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27409`
        //  Estimated: `30874`
        // Minimum execution time: 76_964_000 picoseconds.
        Weight::from_parts(78_057_000, 30874)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteList` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::ActionsQueue` (r:1 w:1)
    /// Proof: `Paras::ActionsQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement_finalize_onboarding_accept() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `26799`
        //  Estimated: `30264`
        // Minimum execution time: 456_498_000 picoseconds.
        Weight::from_parts(461_636_000, 30264)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement_finalize_onboarding_reject() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `26777`
        //  Estimated: `30242`
        // Minimum execution time: 75_743_000 picoseconds.
        Weight::from_parts(77_165_000, 30242)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}
